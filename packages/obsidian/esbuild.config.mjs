import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import {copy} from "esbuild-plugin-copy";
import {existsSync, mkdirSync, watch, writeFileSync} from "fs";
import path from "path";
import {execSync} from "child_process";

const banner =
	`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = process.env.NODE_ENV === "production";
const obsidianVaultPath = process.env.OBSIDIAN_VAULT_PATH;
const obsidianPluginPath = obsidianVaultPath ? path.join(obsidianVaultPath, '.obsidian', 'plugins', 'obsidian-lovpen') : process.env.OBSIDIAN_PLUGIN_PATH;

// 自动同步到 Obsidian 插件目录的函数
const syncToObsidian = () => {
	if (obsidianPluginPath) {
		// 检查目标目录是否存在，不存在则创建
		if (!existsSync(obsidianPluginPath)) {
			const shortPath = obsidianPluginPath.replace(process.env.HOME, '~');
			console.log(`📁 Creating plugin directory: ${shortPath}`);
			try {
				mkdirSync(obsidianPluginPath, {recursive: true});
				console.log(`✅ Directory created`);
			} catch (error) {
				console.error(`❌ Failed to create directory: ${error.message}`);
				process.exit(1);
			}
		}

		try {
			execSync(`rsync -a -q packages/obsidian/dist/ "${obsidianPluginPath}"`, {
				stdio: 'pipe',
				cwd: path.resolve('../..')
			});
			const shortPath = obsidianPluginPath.replace(process.env.HOME, '~');
			console.log(`✅ Synced to vault: ${shortPath.split('/').slice(-1)[0]}`);
		} catch (error) {
			console.error('❌ Sync failed:', error.message);
			process.exit(1);
		}
	}
};

// Native node modules plugin to handle .node files
const nativeNodeModulesPlugin = {
	name: 'native-node-modules',
	setup(build) {
		// Simply mark .node files as external to avoid bundling them
		build.onResolve({ filter: /\.node$/ }, args => ({
			path: args.path,
			external: true,
		}))
	},
}

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		// "@css-inline/css-inline",
		...builtins],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: "dist/main.js",
	plugins: [
		nativeNodeModulesPlugin,
		copy({
			// 复制以下资源到 dist/assets 目录
			assets: [
				// 复制插件所需的其他文件到 dist 目录
				{from: ['./manifest.json'], to: ['./manifest.json'], outDir: './dist'},
				{from: ['../assets/**/*'], to: ['./assets/'], outDir: './dist'},
				{from: ['../frontend/dist/**/*'], to: ['./frontend/'], outDir: './dist'},
			],
			verbose: false, // 关闭详细日志
		}),
		// 构建摘要插件
		{
			name: 'build-summary',
			setup(build) {
				build.onEnd((result) => {
					if (result.errors.length === 0 && !prod) {
						// 简洁的构建完成信息
						console.log(`✨ Build complete`);
					}
				});
			},
		},
		// 构建完成后自动同步插件
		{
			name: 'obsidian-sync',
			setup(build) {
				build.onEnd((result) => {
					if (result.errors.length === 0) {
						// 构建成功后立即同步
						syncToObsidian();
					}
				});
			},
		},
	],
});


if (prod) {
	await context.rebuild();
	// syncToObsidian(); // 已在 onEnd 钩子中处理
	process.exit(0);
} else {
	await context.watch();
	// 初始构建完成后的同步已在 onEnd 钩子中处理

	let rebuildTimeout;
	let changedFiles = new Set();
	const debounceRebuild = () => {
		clearTimeout(rebuildTimeout);
		rebuildTimeout = setTimeout(async () => {
			try {
				const fileCount = changedFiles.size;
				console.log(`🔄 Detected ${fileCount} file change${fileCount > 1 ? 's' : ''}, rebuilding...`);
				changedFiles.clear();
				await context.rebuild();
				// console.log('✅ Rebuild completed'); // 已由其他插件处理
			} catch (error) {
				console.error('❌ Rebuild failed:', error);
			}
		}, 100); // 100ms防抖
	};

	// 监听变化，触发重新构建
	['../frontend/dist', "../assets"].forEach((p) => {
		const targetPath = path.resolve(p)
		console.log(`👀 Watching: ${p}`);
		try {
			watch(targetPath, {recursive: true}, (eventType, filename) => {
				if (filename) {
					changedFiles.add(filename);
					debounceRebuild();
				}
			});

		} catch (error) {
			console.warn('⚠️ Could not watch frontend dist directory:', error.message);
			console.log('💡 Make sure to run "pnpm dev" in the frontend package first');
		}
	})
}
